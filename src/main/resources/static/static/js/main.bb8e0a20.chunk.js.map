{"version":3,"sources":["middleware/api.js","api/ContactsApi.js","common/AppUtility.js","containers/Contacts.js","containers/App.js","reportWebVitals.js","index.js"],"names":["callBackendApi","endpoint","method","postParam","fullUrl","process","lowerCase","indexOf","Date","getTime","fetchParam","headers","Headers","Object","assign","body","JSON","stringify","fetch","then","response","resolveResult","ok","status","Promise","reject","json","e","ContactsApi","loadContacts","page","size","successCallback","failCallback","req","error","searchContacts","name","AppUtility","showErrorText","message","description","notification","showSucceedMessage","success","Contacts","useState","undefined","contacts","setContacts","dataIsLoading","setDataIsLoading","contactsCount","setContactsCount","searchText","setSearchText","setPage","setSize","useEffect","data","content","totalElements","dataIndex","handleSearch","selectedKeys","confirm","handleReset","clearFilters","columns","title","key","render","avatarUrl","width","height","src","filterDropdown","setSelectedKeys","style","padding","placeholder","value","onChange","target","onPressEnter","marginBottom","display","type","onClick","icon","SearchOutlined","closeDropdown","filterIcon","filtered","color","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","text","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","paginationData","total","showSizeChanger","pageSizeOptions","defaultCurrent","margin","className","subTitle","loading","rowKey","id","dataSource","pagination","change","current","pageSize","tableOnChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb8e0a20.chunk.js","sourcesContent":["import {indexOf, lowerCase} from \"lodash\";\n\n// Fetches an API response and normalizes the result JSON according to schema.\n// This makes every API response have the same shape, regardless of how nested it was.\nexport const callBackendApi = (endpoint, method, postParam) => {\n    let fullUrl = process.env.REACT_APP_BASE_URL + endpoint;\n\n    if (lowerCase(method) === 'get') {\n        const paramOfTime = indexOf(fullUrl, '?') >= 0 ? '&' : '?'\n        fullUrl = fullUrl + paramOfTime + 'cachedTime=' + new Date().getTime()\n    }\n\n    let fetchParam = {\n        method: method\n    };\n\n    let headers = new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache, no-store, no-transform',\n        'Pragma': 'no-cache',\n        'Access-Control-Allow-Origin': '*'\n    });\n\n    fetchParam = Object.assign(fetchParam, {headers: headers})\n\n    if (postParam) {\n        fetchParam = Object.assign(fetchParam, {body: JSON.stringify(postParam)})\n    }\n\n    return fetch(fullUrl, fetchParam).then(response => resolveResult(response))\n}\n\n\nconst resolveResult = (response) => {\n    if (!response.ok) {\n        try {\n            if (response.status === 401) {\n                return Promise.reject(\"Client must be authenticated to access this resource.\");\n            } else if (response.status === 404) {\n                return Promise.reject(\"Service is not available!\");\n            } else if (response.status === 405) {\n                return Promise.reject(\"Service method is not allowed!\");\n            }\n            return response.json().then(json => Promise.reject(json))\n        } catch (e) {\n            return Promise.reject(\"An error occurred!\")\n        }\n    }\n\n    return response.json().then(json => {\n        return json;\n    })\n}","import {callBackendApi} from \"../middleware/api\";\n\n\nexport default class ContactsApi {\n    static loadContacts = (page, size, successCallback, failCallback) => {\n        const req = {\n            endpoint: `/contact/all/page/${page}/size/${size}`,\n            method: 'get'\n        };\n\n        callBackendApi(req.endpoint, req.method, null)\n            .then(\n                (response) => {\n                    successCallback(response)\n                },\n                error => {\n                    failCallback(error);\n                }\n            )\n    }\n\n    static searchContacts = (name, page, size, successCallback, failCallback) => {\n        const req = {\n            endpoint: `/contact/search?name=${name}&page=${page}&size=${size}`,\n            method: 'get'\n        };\n\n        callBackendApi(req.endpoint, req.method, null)\n            .then(\n                (response) => {\n                    successCallback(response)\n                },\n                error => {\n                    failCallback(error);\n                }\n            )\n    }\n}","import {notification} from \"antd\";\n\nexport default class AppUtility {\n\n    static showErrorText = function (message, description) {\n        notification.error({\n            message: message,\n            description: description\n        });\n    };\n\n    static showSucceedMessage = function (message, description) {\n        notification.success({\n            message: message,\n            description: description\n        });\n    };\n}","import {Table, PageHeader, Image, Input, Space, Button} from \"antd\";\nimport React, {useEffect, useState} from \"react\";\nimport ContactsApi from \"../api/ContactsApi\";\nimport AppUtility from \"../common/AppUtility\";\nimport 'antd/dist/antd.css';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\n\nfunction Contacts() {\n    const [contacts, setContacts] = useState(undefined);\n    const [dataIsLoading, setDataIsLoading] = useState(false);\n    const [contactsCount, setContactsCount] = useState(undefined);\n    const [searchText, setSearchText] = useState(undefined);\n    const [page, setPage] = useState(0);\n    const [size, setSize] = useState(10);\n\n    useEffect(() => {\n        setDataIsLoading(true);\n\n        if(!searchText) {\n            ContactsApi.loadContacts(page, size, (response) => {\n                setDataIsLoading(false);\n                if(response.data) {\n                    setContacts(response.data.content);\n                    setContactsCount(response.data.totalElements)\n                }\n            }, (error) => {\n                setDataIsLoading(false);\n                setContacts(undefined);\n                setContactsCount(0);\n                AppUtility.showErrorText(\"Error\",\"Could not load contacts!\" )\n            })\n        } else {\n            ContactsApi.searchContacts(searchText, page, size, (response) => {\n                setDataIsLoading(false);\n                if(response.data) {\n                    setContacts(response.data.content);\n                    setContactsCount(response.data.totalElements)\n                }\n            }, (error) => {\n                setDataIsLoading(false);\n                setContacts(undefined);\n                setContactsCount(0);\n                AppUtility.showErrorText(\"Error\",\"Could not load contacts!\" )\n            })\n        }\n    }, [page, size, searchText]);\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => handleSearch(selectedKeys, confirm)}\n                    style={{ marginBottom: 8, display: 'block' }}\n                />\n                <Space>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => handleSearch(selectedKeys, confirm)}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: 90 }}\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                        Reset\n                    </Button>\n                    <Button\n                        type=\"link\"\n                        size=\"small\"\n                        onClick={() => {\n                            confirm({ closeDropdown: false });\n                            setSearchText(selectedKeys[0]);\n                        }}\n                    >\n                        Filter\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n        onFilter: (value, record) =>\n            record[dataIndex]\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n                : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                //setTimeout(() => searchInput.select(), 100);\n            }\n        },\n        render: text =>\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[searchText]}\n                    autoEscape\n                    textToHighlight={text ? text.toString() : ''}\n                />\n    });\n\n    const handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        setSearchText(selectedKeys[0])\n    };\n\n    const handleReset = clearFilters => {\n        clearFilters();\n        setSearchText('');\n    };\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n        },\n        {\n            title: 'Avatar',\n            dataIndex: 'avatarUrl',\n            key: 'avatarUrl',\n            render: avatarUrl => <Image width={30} height={40} src={avatarUrl}/>\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            ...getColumnSearchProps('name')\n        }\n    ]\n\n    const paginationData = {\n        total: contactsCount,\n        showSizeChanger: true,\n        pageSizeOptions: ['10', '25', '50', '100', '150', '250', '500', '1000'],\n        defaultCurrent: 1,\n    };\n\n    const tableOnChange = (change) => {\n        setPage(change.current - 1);\n        setSize(change.pageSize);\n    };\n\n\n\n    return (\n        <div style={{margin: 50}}>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"My Contacts\"\n                subTitle=\"This page shows the list of your contacts.\"\n            />\n            <Table\n                loading={dataIsLoading}\n                rowKey={record => record.id}\n                size='small'\n                columns={columns}\n                dataSource={contacts ? contacts : []}\n                pagination={paginationData}\n                onChange={ change => tableOnChange(change)}\n            />\n        </div>\n\n    )\n};\n\nexport default Contacts;","import Contacts from \"./Contacts\";\n\nfunction App() {\n  return (\n    <div>\n      <Contacts/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}